[
{
	"uri": "https://carloct.github.io/algorithms/loop-analysis/",
	"title": "Loop analysis",
	"tags": [],
	"description": "",
	"content": " Loop analysis It\u0026rsquo;s important to remember that the time complexity, and in particular the big O notation is an aproximation and it is supposed to represents only the growth in relation of a variable input. It\u0026rsquo;s not the sum of the time taken by each algorithm step, it\u0026rsquo;s a measurement of the computation time growth for an arbitrary, variable input. Anything constant can be ignored\nO(1) Represent the time complexity of an algorithms which doesn\u0026rsquo;t perform any loop, recursion, or call to a non time-costant function\nfunction(int $arg): int { // any very complex computation // still O(1) return $arg * 2; }  A loop or recursion that is executed a constant number of times is still considered O(1), no matter how big is the constant\nThe following loop has still a complexity of O(1)\n$c = 1000000; // $c is constant for($i = 0; $i \u0026lt;= $c; $i++) { // O(1) expression echo $i; }  O(n) It\u0026rsquo;s a linear growth, the time taken by the algorithm grows linearly as the input grows.\n// $n is the variable input for($i = 0; $i \u0026lt; $n; $i++) { echo $i; }  In this case, the loop iterator is usually incremented by a constant amount.\n$c = 100; // constant increment, O(n) still depends on n only for($i = 0; $i \u0026lt; $n; $i += $c) { echo $i; }  Even if we use an arbitrary amount for incrementing the iterator, the loop is still dependant only on the variable input $n\n"
},
{
	"uri": "https://carloct.github.io/react/render-props/",
	"title": "Render Props",
	"tags": [],
	"description": "",
	"content": " Resources  Never Write Another HoC Understanding Render Props Children Render Props Facebook - Render Props Do more with less  "
},
{
	"uri": "https://carloct.github.io/algorithms/",
	"title": "Algorithms",
	"tags": [],
	"description": "",
	"content": " Chapter X Algorithms You\u0026rsquo;ll need some coffee\n"
},
{
	"uri": "https://carloct.github.io/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://carloct.github.io/blog/psr-phpstorm-settings/",
	"title": "PSR PhpStorm settings",
	"tags": ["laravel", "phpstorm", "psr"],
	"description": "",
	"content": "PhpStorm has a built-in support for PSR1/2 standards, it can easily be enabled in the Preferences menu.\nType Code Style in the search box if you can\u0026rsquo;t see it\nThen select PHP from the sub-menu. Now, practically hidden in the right upper corner, there\u0026rsquo;s a link (button?) Set from\u0026hellip;\nIt\u0026rsquo;s unclear why such a widely used setting is a floating writing in the interface.\nSelect Predefined Styles \u0026gt; PSR1/PSR2\nClick Apply/OK\nWe\u0026rsquo;re only halfway through, this only enforces the selected code style when invoking Code \u0026gt; Reformat Code (or Alt + Cmd + L on a Mac), and it does absolutely nothing when you save a file. This might be what you want, and your journey ends here.\nIf you want to format the code automatically every time you save a file, there\u0026rsquo;s one more step.\nYou can define a Macro and remap the save action to a list of commands, specifically Reformat Code and then Save, but once you do that, there\u0026rsquo;s no easy path to disable the formatting temporarily for whatever reason, so I suggest to use a very popular plugin:\nhttps://github.com/dubreuia/intellij-plugin-save-actions\nFollow the installation instructions and restart PhpStorm\nOpen the Preferences panel again, and you will see a new menu Save Actions at the bottom\nAt this point whenever you save a file, the code will be formatted to a PSR1/2 standard.\nThere are a few settings you can adapt to your needs, and most importantly you can easily disable it without remapping shortcuts, and add paths/files you want to ignore.\n"
},
{
	"uri": "https://carloct.github.io/blog/laravel-react-guide/",
	"title": "Guide on React with Laravel 5.4",
	"tags": ["laravel", "react"],
	"description": "Vuejs is great but what about React?",
	"content": " Laravel 5.4 comes shipped with a nice integration with Vuejs, you install the framework and everything is already in place, there are even few example files you can start from, but what about React?\nVuejs is a great framework, but I like the less conventional approach of React and the more active community, and thanks to the amazing Laravel Mix, switching to React is a no brainer.\nCreate a Laravel project composer create-project --prefer-dist laravel/laravel laravel-react  And install the npm dependencies\nnpm install  Add react and react-dom as dependencies\nnpm install --save react react-dom  Set up Laravel Mix Laravel 5.4 relies on Mix for the assets compiling, it\u0026rsquo;s essentially a wrapper around Webpack, and it exposes a method for using React out of box.\nIn webpack.min.js change the line:\nmix.js('resources/assets/js/app.js', 'public/js') .sass('resources/assets/sass/app.scss', 'public/css');  To:\nmix.react('resources/assets/js/app.js', 'public/js') .sass('resources/assets/sass/app.scss', 'public/css');  now run npm run dev, Mix will download all the dependencies required to transpile React jsx.\nThat\u0026rsquo;s it, Mix did all the hard work for us. You can even run npm run watch and it will recompile the javascript as soon as you save the file.\nClean up Laravel comes with some references to Vue that you want to remove since you won\u0026rsquo;t be using them.\nIn resources/assets/js/app.js, delete the content and replace it with:\nimport React from 'react'; import ReactDom from 'react-dom'; ReactDom.render( \u0026lt;h1\u0026gt;Hello, React!\u0026lt;/h1\u0026gt;, document.getElementById('root') );  In package.json remove Vue from the dependencies, and delete resources/assets/js/bootstrap.js\nTest it Open resources/views/welcome.blade.php and add a \u0026lt;script\u0026gt; tag before the closing \u0026lt;/body\u0026gt; tag\n\u0026lt;script type=\u0026quot;text/javascript\u0026quot; src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt;  then add a div that will be your root react element, anywhere within the \u0026lt;body\u0026gt; tag\n\u0026lt;div id=\u0026quot;root\u0026quot;\u0026gt;\u0026lt;/div\u0026gt;  Build the js modules\nnpm run dev  Test it with the built-in laravel server\nphp artisan serve  and you should see\nIf you want to take full advantage of ES6, you should also install the relative babel modules:\nnpm install --only=dev babel-preset-es2015 babel-preset-stage-2  and drop a .babelrc file in the project root folder\n{ \u0026quot;presets\u0026quot;: [\u0026quot;react\u0026quot;, \u0026quot;es2015\u0026quot;, \u0026quot;stage-2\u0026quot;] }  "
},
{
	"uri": "https://carloct.github.io/blog/laravel-on-docker/",
	"title": "Minimal Docker setup for Laravel on macOS",
	"tags": ["laravel", "docker"],
	"description": "No boilerplate, just the minimum",
	"content": " There are many pre-built solutions for setting up a Laravel + Docker environment, they\u0026rsquo;re all excellent solutions, but too complex for my needs 90% of the times.\nIt\u0026rsquo; s the boilerplate syndrome, a starter package that is supposed to ease the pain of creating a new project but then soon becomes a huge blob that tries to suit every possible setup.\nI wanted something that would let me start writing code with a minimal footprint, that could be eventually improved if necessary.\nInstall Docker for Mac Download the Docker for Mac\nRecently Docker split the whole project in different releases, the Community Edition (free) is what you want.\nFollow the instructions, this will install Docker on your local machine\nCreate a dev stack with Docker Compose Docker is great for running single processes, but in most cases, you will need more than a single for running a full Laravel application.\nDocker offers an easy way to define a stack of services called Docker Compose. It\u0026rsquo;s a simple YAML file where you define the containers (aka services) you need.\nIn particular, we need:\n Nginx Php 7.1 as FPM Mysql\n  Create a folder, I\u0026rsquo;ll name it docker-laravel, choose any name you like.\nmkdir docker-laravel cd docker-laravel  Create the Doker compose file\nvi docker-compose.yml  Nginx Let\u0026rsquo;s define the Nginx container\nversion: '3' services: nginx: image: nginx:latest ports: - \u0026quot;80:80\u0026quot;   version is the docker compose syntax version, in this case, the version 3, the latest at the time of writing services is the list of services you want to define nginx is the name you choose for the service, can be anything image is the docker image that you want to use for the service, in this case, the official Nginx image published on Dockerhub (a central repository for public images) ports are the ports you want to map to the service. We\u0026rsquo;re mapping the internal docker container port 80, the local machine port 80\n  That\u0026rsquo;s it, you have defined a stack with a single container, try it running:\ndocker-compose up  Docker will download the Nginx image, create the container and expose the ports. If you go to localhost:80 in your browser you will see the default Nginx page\nPHP The setup for the PHP container will require some tweaking since the official PHP image doesn\u0026rsquo;t come with all the extensions we need to run Laravel. We will extend the official image and add everything we need.\nSince also the Nginx image will require some additional command, we can keep all the customised images in a sub-folder image, within docker-laravel.\nThis will be the final layout:\ndocker-laravel | |-images |-php-fpm |-nginx docker-compose.yml  Create the php-fpm folder\nmkdir -p images/php-fpm cd images/php-fpm  We can extend the official Php image by creating a Dockerfile\nvi Dockerfile  Dockerfile\nFROM php:fpm RUN apt-get update \u0026amp;\u0026amp; apt-get install -y \\ libmcrypt-dev \u0026amp;\u0026amp; \\ docker-php-ext-install pdo_mysql mcrypt   FROM defines the image we\u0026rsquo;re extending from RUN is the command that the container will execute when started, in this case, we install mcrypt and enable it with the prebuilt command docker-php-install command. We enable also pdo_mysql  Now we can use this image in our docker-compose.yml\nversion: '3' services: nginx: image: nginx:latest ports: - \u0026quot;80:80\u0026quot; fpm: build: ./images/php-fpm ports: - \u0026quot;9000:9000\u0026quot;  The container is called fpm, you can choose anything you like. Instead of defining an image, we use build that simply tells docker that it needs to build the image from the Dockerfile in ./images/php-fpm\nNow we have Nginx and Php\u0026hellip; in a black box, how can we share files from the host machine to the docker containers?\nDocker compose let us specify a volume we want to share with the containers, basically a shared folder from the host machine to the containers.\nversion: '3' services: nginx: image: nginx:latest ports: - \u0026quot;80:80\u0026quot; volumes: - ./:/var/www/laravel working_dir: /var/www/laravel fpm: build: ./images/php-fpm ports: - \u0026quot;9000:9000\u0026quot; volumes: - ./:/var/www/laravel working_dir: /var/www/laravel  volume will share the current directory (the directory where the docker-compose.yml file is) with a directory /var/www/laravel.\nThe syntax is local_folder:container_folder\nThe folder is shared with both Nginx and Php containers, this is not necessary, but having the source code mapped also to the Php container will ease the pain of running Composer.\nworking_dir is just a helper to tell which folder we want to be the default folder.\nWe have the source code, but Nginx doesn\u0026rsquo;t know anything about it and doesn\u0026rsquo;t know about the Php container, the two containers are completely isolated, we need to make them see each other and define a virtual host for Nginx.\nLinks With the directive link, we can define a link between containers.\nversion: '3' services: nginx: image: nginx:latest ports: - \u0026quot;80:80\u0026quot; links: - fpm volumes: - ./:/var/www/laravel working_dir: /var/www/laravel fpm: build: ./images/php-fpm ports: - \u0026quot;9000:9000\u0026quot; volumes: - ./:/var/www/laravel working_dir: /var/www/laravel  Now Nginx can see the Php container. We defined the Php container as fpm so we need to use the same name to link it up.\nNginx virtual host Nginx needs to know about the source code we shared with its container. Create a vhost.conf file in images/nginx\nserver { listen 80; server_name laravel.dev; root /var/www/laravel/public; index index.html index.htm index.php; charset utf-8; location / { try_files $uri $uri/ /index.php$is_args$args; } location = /favicon.ico { access_log off; log_not_found off; } location = /robots.txt { access_log off; log_not_found off; } access_log off; error_log /var/log/nginx/Laravel-error.log error; sendfile off; client_max_body_size 100m; location ~ \\.php$ { fastcgi_split_path_info ^(.+\\.php)(/.+)$; fastcgi_pass fpm:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_intercept_errors off; fastcgi_buffer_size 16k; fastcgi_buffers 4 16k; } location ~ /\\.ht { deny all; } }  And share this file with the nginx container\nvolumes: - ./images/nginx/vhost.conf:/etc/nginx/conf.d/laravel.conf  to make things easier, map the virtual host in your local hosts file\nvi /etc/hosts  ## # Host Database # # localhost is used to configure the loopback interface # when the system is booting. Do not change this entry. ## 127.0.0.1 localhost 255.255.255.255 broadcasthost ::1 localhost 127.0.0.1 laravel.dev  Mysql The last step is Mysql. Luckily the official image will do just fine this time. Let\u0026rsquo;s define the service in docker-compose\nversion: '3' services: [...] db: image: mysql:5.7 ports: - \u0026quot;3360:3360\u0026quot; volumes: - data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: laravel MYSQL_USER: laravel MYSQL_PASSWORD: time3483 volumes: data:  The volumes directive specify a data volume, a persistent volume that won\u0026rsquo;t be destroyed when you stop the container, so your Mysql database won\u0026rsquo;t be lost.\nWith environment you can define default values for the database you will create, root password, a default database, a user, and a user password.\nThe last thing we need to do is to link the db container to Php\n[...] fpm: build: ./images/php-fpm ports: - \u0026quot;9000:9000\u0026quot; links: - db volumes: - ./:/var/www/laravel working_dir: /var/www/laravel [...]  The final docker-compose will look like this:\nversion: '3' services: nginx: image: nginx:latest ports: - \u0026quot;80:80\u0026quot; links: - fpm volumes: - ./:/var/www/laravel - ./images/nginx/vhost.conf:/etc/nginx/conf.d/laravel.conf working_dir: /var/www/laravel fpm: build: ./images/php-fpm ports: - \u0026quot;9000:9000\u0026quot; links: - db volumes: - ./:/var/www/laravel working_dir: /var/www/laravel db: image: mysql:5.7 ports: - \u0026quot;3360:3360\u0026quot; volumes: - data:/var/lib/mysql environment: MYSQL_ROOT_PASSWORD: password MYSQL_DATABASE: laravel MYSQL_USER: laravel MYSQL_PASSWORD: time3483 volumes: data:  Run docker-compose up and the images will be downloaded/built and the containers will be started. You can access it via laravel.dev in your browser.\nNow your app lives within a container, in particular, the php process will have access to the database via the db link, this is something to keep in mind when running migrations since the .env file will need to have the correct database host\nDB_HOST=db  "
},
{
	"uri": "https://carloct.github.io/blog/",
	"title": "Blogs",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/",
	"title": "DevLog",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/categories/development/",
	"title": "Development",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/docker/",
	"title": "Docker",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/laravel/",
	"title": "Laravel",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/phpstorm/",
	"title": "Phpstorm",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/psr/",
	"title": "Psr",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/react/",
	"title": "React",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://carloct.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]